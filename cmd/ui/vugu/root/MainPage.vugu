
<div>
    <div vg-if="c.IsLoading">Loading...</div>

    <button @click="c.HandleClick(event)">fetch books</button>

    <div vg-for='_, book := range c.Books'>
        <p vg-content='fmt.Sprint(book.Id, "---", book.Author, "---", book.Title)'></p>
        <div vg-for='i, quote := range book.Quotes'>
            <p vg-content='fmt.Sprint(i, ": ", quote.Text)'></p>
        </div>
    </div>

    <div>
        <form>
            <vgform:Input type="text" :Value='vgform.StringPtr{&c.BookForm.Title}' placeholder="title"></vgform:Input>
            <vgform:Input type="text" :Value='vgform.StringPtr{&c.BookForm.Author}' placeholder="author"></vgform:Input>
            <button type="submit" @click="c.SubmitBookForm(event)">add book</button>
        </form>
    </div>

    <div>
        <form>
            <vgform:Input type="text" :Value='vgform.StringPtr{&c.ParseForm.BookId}' placeholder="book id"></vgform:Input>
            <vgform:Input type="text" :Value='vgform.StringPtr{&c.ParseForm.Separator}' placeholder="separator"></vgform:Input>
            <vgform:Textarea :Value='vgform.StringPtr{&c.ParseForm.Text}' placeholder="paste here all quotes"></vgform:Textarea>
            <button type="submit" @click="c.SubmitParseForm(event)">parse quotes and add to book </button>
        </form>
    </div>
</div>
<script type="application/x-go">

import (
    "bytes"
    "encoding/json"
    "net/http"
    "time"

    "github.com/vugu/vugu/vgform"

    "github.com/blinlol/bookworm/model"
)

type MainPage struct {
    BookForm BookForm
    ParseForm ParseQuotesForm
    Books []*model.Book     `vugu:data`
    IsLoading bool          `vugu:data`
}

type BookForm struct {
    Title string
    Author string
}

type ParseQuotesForm struct {
    Text string
    BookId string
    Separator string
}

var apiurl string = "http://127.0.0.1:8081/api"


func fetchBooks() []*model.Book {
    res, err := http.Get(apiurl + "/books")
    if err != nil {
        log.Printf("Error fetching: %v", err)
        return make([]*model.Book, 0)
    }
    defer res.Body.Close()

    var resp model.GetBooksResponse
    err = json.NewDecoder(res.Body).Decode(&resp)
    if err != nil {
        log.Printf("Error JSON decoding: %v", err)
        return make([]*model.Book, 0)
    }
    return resp.Books
}

func (c *MainPage) HandleClick(event vugu.DOMEvent) {    

    ee := event.EventEnv()

    go func() {
        ee.Lock()
        c.IsLoading = true
        ee.UnlockRender()

        books := fetchBooks()
        for i, b := range books {
            log.Printf("%d %v", i, *b)
        }
        time.Sleep(time.Second)

        ee.Lock()
        c.Books = books
        c.IsLoading = false
        ee.UnlockRender()
    }()
}

func (c *MainPage) SubmitBookForm(event vugu.DOMEvent) {
    ee := event.EventEnv()
    go func(){
        ee.RLock()
        title := c.BookForm.Title
        author := c.BookForm.Author
        ee.RUnlock()

        book := model.AddBookRequest{Book: model.Book{Title: title, Author: author}}
        marshaled, _ := json.Marshal(book)
        // TODO: check response code
        _, err := http.Post(
            apiurl + "/books/add",
            "application/json",
            bytes.NewReader(marshaled),
        )
        if err != nil {
            log.Printf("Error while sending form: %v", err)
            return
        }
        
        books := fetchBooks()
        if books == nil {
            return
        }

        ee.Lock()
        c.Books = books
        ee.UnlockRender()
    }()
}

func (c *MainPage) SubmitParseForm(event vugu.DOMEvent) {
    ee := event.EventEnv()
    go func (){
        ee.RLock()
        req := model.ParseQuotesRequest{
            BookId: c.ParseForm.BookId,
            Text: c.ParseForm.Text,
            Separator: c.ParseForm.Separator,
        }
        ee.RUnlock()

        marshaled, _ := json.Marshal(req)
        // TODO
        _, err := http.Post(
            apiurl + "/quotes/parse",
            "application/json",
            bytes.NewReader(marshaled),
        )
        if err != nil {
            log.Printf("Error parse quotes: %v", err)
            return
        }
    }()
}

</script>